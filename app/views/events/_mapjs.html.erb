<div id="floating-panel" class="hidden">
  <input id="pac-input" class="controls" type="text" placeholder="Search Box">
</div>

<div id="map"></div>

<script>
  var stepDisplay;
  var markers = [];
  var geocoder;

  function initMap() {
    directionsService = new google.maps.DirectionsService;
    directionsDisplay = new google.maps.DirectionsRenderer;
    var styles = [
      {
        featureType: "road",
        elementType: "geometry",
        stylers: [
          { lightness: 100 },
          { visibility: "simplified" }
        ]
      },{
        featureType: "poi",
        elementType: "labels",
        stylers: [
          { visibility: "off" }
        ]
      }
    ];
    map = new google.maps.Map(document.getElementById('map'), {
      zoom: 16,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    });
    map.setOptions({styles: styles});
    // Create the search box and link it to the UI element.
    var input = document.getElementById('pac-input');
    var searchBox = new google.maps.places.SearchBox(input);
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

    // Set default result
    resultsPos = new google.maps.LatLng(<%= '25.0495123' %>,<%= '121.5319727' %>)

    // Bias the SearchBox results towards current map's viewport.
    map.addListener('bounds_changed', function() {
      searchBox.setBounds(map.getBounds());
    });
    var service = new google.maps.places.PlacesService(map);
    infoWindow = new google.maps.InfoWindow();

    // Try HTML5 geolocation
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
        var pos = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };
        currentPos = new google.maps.LatLng(pos.lat,pos.lng);
        var here = {
          url: 'images/here.png',
          size: new google.maps.Size(16, 17),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(8, 8),
          scaledSize: new google.maps.Size(17, 17)
        };
        var marker = new google.maps.Marker({
            icon: here,
            position: currentPos,
            map: map
        });
        attachInstructionText(marker, 'Your here!')
        markers.push(marker)
        searchFromCurrentPos(currentPos);
      }, function() {
        currentPos = new google.maps.LatLng(<%= '25.0521298' %>,<%= '121.5325289' %>)
        searchFromCurrentPos(currentPos);
        var marker = new google.maps.Marker({
          position: currentPos,
          map: map,
        });
        attachInstructionText(marker, 'failed to load your position')
        handleLocationError(true, infoWindow, map.getCenter());
      });
    } else {
      // Browser doesn't support Geolocation
      handleLocationError(false, infoWindow, map.getCenter());
    }
    // [START region_getplaces]
    // Listen for the event fired when the user selects a prediction and retrieve
    // more details for that place.
    searchBox.addListener('places_changed', function() {

      var places = searchBox.getPlaces();
      // Clear out the old markers.
      markers.forEach(function(marker) {
        marker.setMap(null);
        markers = [];
      });

      if (places.length == 0) {
        return;
      } else {
        if (places.length == 1) {
          resultsPos = new google.maps.LatLng(
            places[0].geometry.location.lat(),
            places[0].geometry.location.lng()
          )
          searchFromCurrentPos(resultsPos);
          // calculateAndDisplayRoute(directionsService, directionsDisplay);
          // directionsDisplay.setMap(map);
        }
      }
      // For each place, get the icon, name and location.
      // var bounds = new google.maps.LatLngBounds();
      
      // // CHECK BOUND IF ONLY ONE PLACE
      // places.forEach(function(place) {
      //   createMarker(place);
      //   if (place.geometry.viewport) {
      //     Only geocodes have viewport.
      //     bounds.union(place.geometry.viewport);
      //   } else {
      //     bounds.extend(place.geometry.location);
      //   }
      // });
      // map.fitBounds(bounds);
    });
    // [END region_getplaces]
  };
  function searchFromCurrentPos(position){
    // var service = new google.maps.places.PlacesService(map);
    map.setCenter(position);
    $('#floating-panel').removeClass('hidden')
    $.ajax({   
      type:'get',
      dataType: 'json',
      url: '/places',  
      data: { 
        latitude: position.lat(),
        longitude: position.lng()
      },
      success: function(results, status){
        nearbySearchcallback(results, status)
      },
      error: function(event, jqxhr, settings){
        console.log('[POST]ajax_to_places_error:')
        console.log('event: ')
        console.log(event)
        console.log('jqxhr: '+jqxhr)
        console.log('settings: '+settings)
      }
    }, nearbySearchcallback)
    // service.nearbySearch({
    //   location: position,
    //   radius: 500,
    //   types: ['school']
    // }, nearbySearchcallback)
  };
  function calculateAndDisplayRoute(directionsService, directionsDisplay) {

    directionsService.route({
      origin: currentPos,
      destination: resultsPos,
      travelMode: google.maps.TravelMode.DRIVING
    }, function(response, status) {
      if (status === google.maps.DirectionsStatus.OK) {
        directionsDisplay.setDirections(response);
        var route = response.routes[0];
        var summaryPanel = document.getElementById('directions-panel');
        summaryPanel.innerHTML = '';
        // For each route, display summary information.
        for (var i = 0; i < route.legs.length; i++) {
          var routeSegment = i + 1;
          summaryPanel.innerHTML += '<b>Route Segment: ' + routeSegment +
              '</b><br>';
          summaryPanel.innerHTML += route.legs[i].start_address + ' to ';
          summaryPanel.innerHTML += route.legs[i].end_address + '<br>';
          summaryPanel.innerHTML += route.legs[i].distance.text + '<br><br>';
          for (var j = 0; j < route.legs[i].steps.length; j++) {
            summaryPanel.innerHTML += route.legs[i].steps[j].instructions + route.legs[i].steps[j].distance.text + '<br><br>';
          }
        }
        showSteps(response);
      } else {
        window.alert('Directions request failed due to ' + status);
      }
    });
  };
  function showSteps(directionResult) {
    // For each step, place a marker, and add the text to the marker's
    // info window. Also attach the marker to an array so we
    // can keep track of it and remove it when calculating new
    // routes.
    var myRoute = directionResult.routes[0].legs[0];
    for (var i = 0; i < myRoute.steps.length; i++) {
        markers.push( new google.maps.Marker({
          position: myRoute.steps[i].start_point,
          map: map
        }));
        attachInstructionText(marker, myRoute.steps[i].instructions);
    }
  };
  function nearbySearchcallback(results, status) {
    var bounds = new google.maps.LatLngBounds();
    if (status === google.maps.places.PlacesServiceStatus.OK) {
      for (var i = 0; i < results.length; i++) {
        if (results[i].rating > 0 && results[i].icon.match('school')!= null) {
          createMarker(results[i]);
          if (results[i].geometry.viewport) {
            // Only geocodes have viewport.
            bounds.union(results[i].geometry.viewport);
          } else {
            bounds.extend(results[i].geometry.location);
          }
          map.fitBounds(bounds);
        }
      }
    }else{
      var icon = 'images/places.png'
      for (var i = 0; i < results.places.length; i++) {
        var respos = new google.maps.LatLng(results.places[i].latitude,results.places[i].longitude)
        marker = new google.maps.Marker({
          map: map,
          icon: icon,
          title: results.places[i].name,
          position: respos
        });
        attachInfromations(marker,results.places[i])
        markers.push(marker)
        bounds.extend(respos);
        map.fitBounds(bounds);
      }
    }
  }
  function createMarker(place) {
    var icon = 'images/places.png'
    marker = new google.maps.Marker({
      map: map,
      icon: icon,
      title: place.name,
      position: place.geometry.location
    });
    attachInfromations(marker,place)
    markers.push(marker)
  };
  function attachInfromations(marker, place) {
    google.maps.event.addListener(marker, 'click', function() {
      markers.forEach(function(m,index) {
        if (index != 0) {
          m.setIcon('images/places.png');
        }
      });
      marker.setIcon('images/pselect.png');
      var hidden_informations = document.getElementById('hidden_informations');
      var more_events_link = document.getElementById('more_events_link');
      $('#more_events_link').removeClass('close')
      if (distance = hidden_informations.getAttribute(place.place_id)) {
        if (distance > 1000) {
          $('#place_distance').html('距離' + Math.round(distance/10)/100 + '公里')
        }else{
          $('#place_distance').html('距離' + distance + '公尺')
        }
        updatePlaceToLinks(place,distance);
        sendAjaxtoServer(place,distance);
      }else{
        var placePos = new google.maps.LatLng(
          place.latitude,
          place.longitude
          // place.geometry.location.lat(),
          // place.geometry.location.lng()
        );
        directionsService.route({
          origin: currentPos,
          destination: placePos,
          travelMode: google.maps.TravelMode.DRIVING
        }, function(response, status) {
          if (status === google.maps.DirectionsStatus.OK) {
            var route = response.routes[0];
            var distance = route.legs[0].distance.value;
            hidden_informations.setAttribute(place.place_id,distance);
            if (distance > 1000) {
              $('#place_distance').html('距離約' + Math.round(distance/10)/100 + '公里')
            }else{
              $('#place_distance').html('距離約' + distance + '公尺')
            }
            updatePlaceToLinks(place,distance);
            sendAjaxtoServer(place,distance);
          } else {
            window.alert('Directions request failed due to ' + status);
          };
        });
      } 
      $('#place_name').html(place.name);
    });
  };
  function updatePlaceToLinks(place,distance){
    var more_events_link = $('#more_events_link')[0];
    var more_events_link_url = more_events_link.getAttribute('href');
    if (getURLParameter(more_events_link_url, 'distance') == null) {
      more_events_link.href = '/places/' + place.place_id + "?distance=" + distance
    }
    $('#day_selection a').each( function( index, element ){
      var a_tag = this
      var a_url = $(a_tag).attr('href')
      var place_id = getURLParameter(a_url, 'place_id');
      if (place_id == null) {
        a_tag.href = a_url + '&place_id=' + place.place_id + "&distance=" + distance
      } else {
        a_url = a_url.replace(/distance=[^&]+/, 'distance=' + distance);
        a_tag.href = a_url.replace(/place_id=[^&]+/, 'place_id=' + place.place_id);
      }
    });
  };
  function sendAjaxtoServer(place,distance){
    var date;
    if (getURLParameter($('#more_events_link').attr('href'), 'date') == null){
      date = 'today'
    } else {
      date = getURLParameter($('#more_events_link').attr('href'), 'date')
    }
    var place = {
      // name: place.name,
      // location: place.geometry.location.toJSON(),
      date: date,
      distance: distance,
      place_id: place.place_id
      // reference: place.reference,
      // rating: place.rating,
      // vicinity: place.vicinity,
    };
    $.ajax({   
      type:'POST',
      dataType: "script",
      url: '/places',  
      data: { params_from_map: place },
      success: function(){
        console.log('[POST]ajax_to_places_success')
      },
      error: function(event, jqxhr, settings){
        console.log('[POST]ajax_to_places_error:')
        console.log('event: ')
        console.log(event)
        console.log('jqxhr: '+jqxhr)
        console.log('settings: '+settings)
      }
    })
  };
  function attachInstructionText(marker, text) {
    google.maps.event.addListener(marker, 'click', function() {
      infoWindow.setContent(text);
      infoWindow.open(map, marker);
    });
  };
  function handleLocationError(browserHasGeolocation, infoWindow, pos) {
    infoWindow.setPosition(pos);
    infoWindow.setContent(browserHasGeolocation ?
                          'Error: The Geolocation service failed.' :
                          'Error: Your browser doesn\'t support geolocation.');
  };
  
</script>

<% google_config = Rails.application.config_for(:google) %>
<script src="https://maps.googleapis.com/maps/api/js?key=<%=google_config["app_id"]%>&libraries=places&callback=initMap" defer></script>