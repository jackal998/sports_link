<div id="floating-panel" class="hidden">
  <input id="pac-input" class="controls" type="text" placeholder="Search Box">
</div>

<div id="map"></div>

<div id="directions-panel"></div>
<% google_config = Rails.application.config_for(:google) %>
<script>
  var stepDisplay;
  var markers = [];
  var geocoder;
  var params_to_post = [];

  function initMap() {
    directionsService = new google.maps.DirectionsService;
    directionsDisplay = new google.maps.DirectionsRenderer;
    map = new google.maps.Map(document.getElementById('map'), {
      zoom: 16,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    });

    // Create the search box and link it to the UI element.
    var input = document.getElementById('pac-input');
    var searchBox = new google.maps.places.SearchBox(input);
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

    // Set default result
    resultsPos = new google.maps.LatLng(<%= '25.0495123' %>,<%= '121.5319727' %>)

    // Bias the SearchBox results towards current map's viewport.
    map.addListener('bounds_changed', function() {
      searchBox.setBounds(map.getBounds());
    });
    var service = new google.maps.places.PlacesService(map);
    infoWindow = new google.maps.InfoWindow();

    // Try HTML5 geolocation
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
        var pos = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };
        currentPos = new google.maps.LatLng(pos.lat,pos.lng);
        // var image = {
        //   url: 'images/here.png',
        //   size: new google.maps.Size(256, 256),
        //   origin: new google.maps.Point(0, 0),
        //   anchor: new google.maps.Point(45, 45),
        //   scaledSize: new google.maps.Size(45, 45)
        // };
        var marker = new google.maps.Marker({
            position: currentPos,
            map: map,
            animation: google.maps.Animation.DROP,
        });
        attachInstructionText(marker, 'Your here!')
        markers.push(marker)
        searchFromCurrentPos(currentPos);
      }, function() {
        currentPos = new google.maps.LatLng(<%= '25.0521298' %>,<%= '121.5325289' %>)
        searchFromCurrentPos(currentPos);
        var marker = new google.maps.Marker({
          position: currentPos,
          map: map,
        });
        attachInstructionText(marker, 'failed to load your position')
        handleLocationError(true, infoWindow, map.getCenter());
      });
    } else {
      // Browser doesn't support Geolocation
      handleLocationError(false, infoWindow, map.getCenter());
    }
    // [START region_getplaces]
    // Listen for the event fired when the user selects a prediction and retrieve
    // more details for that place.
    searchBox.addListener('places_changed', function() {
      var places = searchBox.getPlaces();
      // Clear out the old markers.
      markers.forEach(function(marker) {
        marker.setMap(null);
        markers = [];
      });

      if (places.length == 0) {
        return;
      } else {
        if (places.length == 1) {
          resultsPos = new google.maps.LatLng(
            places[0].geometry.location.lat(),
            places[0].geometry.location.lng()
          )
          searchFromCurrentPos(resultsPos);
          // calculateAndDisplayRoute(directionsService, directionsDisplay);
          // directionsDisplay.setMap(map);
        }
      }
      // For each place, get the icon, name and location.
      var bounds = new google.maps.LatLngBounds();
      
      places.forEach(function(place) {
        createMarker(place);
        if (place.geometry.viewport) {
          // Only geocodes have viewport.
          bounds.union(place.geometry.viewport);
        } else {
          bounds.extend(place.geometry.location);
        }
      });
      map.fitBounds(bounds);
    });
    // [END region_getplaces]
  };
  function searchFromCurrentPos(position){
    var service = new google.maps.places.PlacesService(map);
    map.setCenter(position);
    $('#floating-panel').removeClass('hidden')
    service.nearbySearch({
      location: position,
      radius: 500,
      types: ['school']
    }, nearbySearchcallback)
  };
  function calculateAndDisplayRoute(directionsService, directionsDisplay) {

    directionsService.route({
      origin: currentPos,
      destination: resultsPos,
      travelMode: google.maps.TravelMode.DRIVING
    }, function(response, status) {
      if (status === google.maps.DirectionsStatus.OK) {
        directionsDisplay.setDirections(response);
        var route = response.routes[0];
        var summaryPanel = document.getElementById('directions-panel');
        summaryPanel.innerHTML = '';
        // For each route, display summary information.
        for (var i = 0; i < route.legs.length; i++) {
          var routeSegment = i + 1;
          summaryPanel.innerHTML += '<b>Route Segment: ' + routeSegment +
              '</b><br>';
          summaryPanel.innerHTML += route.legs[i].start_address + ' to ';
          summaryPanel.innerHTML += route.legs[i].end_address + '<br>';
          summaryPanel.innerHTML += route.legs[i].distance.text + '<br><br>';
          for (var j = 0; j < route.legs[i].steps.length; j++) {
            summaryPanel.innerHTML += route.legs[i].steps[j].instructions + route.legs[i].steps[j].distance.text + '<br><br>';
          }
        }
        showSteps(response);
      } else {
        window.alert('Directions request failed due to ' + status);
      }
    });
  };
  function showSteps(directionResult) {
    // For each step, place a marker, and add the text to the marker's
    // info window. Also attach the marker to an array so we
    // can keep track of it and remove it when calculating new
    // routes.
    var myRoute = directionResult.routes[0].legs[0];
    for (var i = 0; i < myRoute.steps.length; i++) {
        markers.push( new google.maps.Marker({
          position: myRoute.steps[i].start_point,
          map: map
        }));
        attachInstructionText(marker, myRoute.steps[i].instructions);
    }
  };
  function nearbySearchcallback(results, status) {
    if (status === google.maps.places.PlacesServiceStatus.OK) {
      var bounds = new google.maps.LatLngBounds();
      for (var i = 0; i < results.length; i++) {
        if (results[i].rating > 0 && results[i].icon.match('school')!= null) {
          createMarker(results[i]);
          if (results[i].geometry.viewport) {
            // Only geocodes have viewport.
            bounds.union(results[i].geometry.viewport);
          } else {
            bounds.extend(results[i].geometry.location);
          }
          map.fitBounds(bounds);
        }
      }
    }
  }
  function createMarker(place) {
    var icon = {
      url: place.icon,
      size: new google.maps.Size(71, 71),
      origin: new google.maps.Point(0, 0),
      anchor: new google.maps.Point(0,0),
      scaledSize: new google.maps.Size(25, 25)
    };
    marker = new google.maps.Marker({
      map: map,
      icon: icon,
      title: place.name,
      position: place.geometry.location
    });
    attachInfromations(marker,place)
    // attachInstructionText(marker, place.name)
    markers.push(marker)
  };
  function attachInfromations(marker, place) {
    google.maps.event.addListener(marker, 'click', function() {
      params_to_post.push({
        name: place.name,
        location: place.geometry.location.toJSON(),
        place_id: place.place_id,
        reference: place.reference,
        rating: place.rating,
        vicinity: place.vicinity
      })

      $.ajax({   
        type:'POST',
        url: '/places',
        beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},   
        data: {params_to_post: params_to_post},
        success: function(){
          console.log('ajax_success')
          }
        })

      params_to_post = [];
      $('#place_name').html(place.name);
      var placePos = new google.maps.LatLng(
        place.geometry.location.lat(),
        place.geometry.location.lng()
      );
      directionsService.route({
        origin: currentPos,
        destination: placePos,
        travelMode: google.maps.TravelMode.DRIVING
      }, function(response, status) {
        if (status === google.maps.DirectionsStatus.OK) {
          var route = response.routes[0];
          var place_distance = document.getElementById('place_distance');
          place_distance.innerHTML = route.legs[0].distance.text;
        } else {
          window.alert('Directions request failed due to ' + status);
        };
      });
    });
  };
  function attachInstructionText(marker, text) {
    google.maps.event.addListener(marker, 'click', function() {
      infoWindow.setContent(text);
      infoWindow.open(map, marker);
    });
  };
  function handleLocationError(browserHasGeolocation, infoWindow, pos) {
    infoWindow.setPosition(pos);
    infoWindow.setContent(browserHasGeolocation ?
                          'Error: The Geolocation service failed.' :
                          'Error: Your browser doesn\'t support geolocation.');
  };
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=<%=google_config["app_id"]%>&libraries=places&callback=initMap" defer></script>